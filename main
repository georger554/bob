import React, { useMemo, useState } from "react";
import { Search, Filter, ExternalLink, Calendar, DollarSign, MapPin, Tag, X, Plus, RefreshCw, Timer } from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";

// --- Types ---
const REGIONS = [
  "All regions",
  "Auckland",
  "Northland",
  "Waikato",
  "Bay of Plenty",
  "Gisborne",
  "Hawke's Bay",
  "Taranaki",
  "Manawatū-Whanganui",
  "Wellington",
  "Tasman",
  "Nelson",
  "Marlborough",
  "West Coast",
  "Canterbury",
  "Otago",
  "Southland",
];

const SOURCES = ["All sources", "GrabOne", "Bookme", "NZ Golf Deals"];

// Demo seed data — replace or extend with live data later
const SEED_DEALS = [
  {
    id: "gbo-1",
    title: "18 Holes for Two + Cart at Gulf Harbour",
    course: "Gulf Harbour Country Club",
    region: "Auckland",
    price: 129,
    was: 240,
    discount: 46,
    validTo: "2025-09-30",
    url: "https://grabo.nz/",
    source: "GrabOne",
    tags: ["18 holes", "Cart included", "Two players"],
  },
  {
    id: "bkm-1",
    title: "Twilight 9 Holes — Weekdays",
    course: "Akarana Golf Club",
    region: "Auckland",
    price: 19,
    was: 35,
    discount: 46,
    validTo: "2025-12-01",
    url: "https://www.bookme.co.nz/",
    source: "Bookme",
    tags: ["Twilight", "Weekdays"],
  },
  {
    id: "nzg-1",
    title: "Green Fee Special (Visitor)",
    course: "Paraparaumu Beach Golf Club",
    region: "Wellington",
    price: 95,
    was: 150,
    discount: 37,
    validTo: "2025-10-15",
    url: "https://www.nzgolfdeals.co.nz/",
    source: "NZ Golf Deals",
    tags: ["Links", "Top-100"],
  },
  {
    id: "bkm-2",
    title: "18 Holes + Range Balls",
    course: "Pegasus Golf & Sports Club",
    region: "Canterbury",
    price: 69,
    was: 110,
    discount: 37,
    validTo: "2025-08-31",
    url: "https://www.bookme.co.nz/",
    source: "Bookme",
    tags: ["Range balls", "18 holes"],
  },
  {
    id: "gbo-2",
    title: "Cart & Green Fee Combo",
    course: "Titirangi Golf Club",
    region: "Auckland",
    price: 149,
    was: 220,
    discount: 32,
    validTo: "2025-09-10",
    url: "https://grabo.nz/",
    source: "GrabOne",
    tags: ["Cart included", "Championship"],
  },
  {
    id: "nzg-2",
    title: "Visitor Midweek Special",
    course: "Millbrook Resort (Coronet)",
    region: "Otago",
    price: 129,
    was: 190,
    discount: 32,
    validTo: "2025-10-30",
    url: "https://www.nzgolfdeals.co.nz/",
    source: "NZ Golf Deals",
    tags: ["Resort", "Midweek"],
  },
];

function classNames(...xs) { return xs.filter(Boolean).join(" "); }

function currency(n){
  try { return n.toLocaleString("en-NZ", { style: "currency", currency: "NZD" }); } catch { return `$${n}`; }
}

function daysLeft(validTo){
  const today = new Date();
  const end = new Date(validTo + "T23:59:59");
  const diff = Math.ceil((end - today) / (1000*60*60*24));
  return diff;
}

export default function GolfDealsNZ(){
  const [query, setQuery] = useState("");
  const [region, setRegion] = useState("All regions");
  const [source, setSource] = useState("All sources");
  const [maxPrice, setMaxPrice] = useState(200);
  const [sortBy, setSortBy] = useState("best"); // best | price | discount | ending
  const [deals, setDeals] = useState(SEED_DEALS);
  const [showAdd, setShowAdd] = useState(false);

  const filtered = useMemo(() => {
    const q = query.trim().toLowerCase();
    let out = deals.filter(d => (
      (region === "All regions" || d.region === region) &&
      (source === "All sources" || d.source === source) &&
      (d.price <= maxPrice) &&
      (!q || [d.title, d.course, d.region, d.source, ...(d.tags||[])].some(s => s.toLowerCase().includes(q)))
    ));

    switch (sortBy){
      case "price":
        out.sort((a,b)=>a.price-b.price); break;
      case "discount":
        out.sort((a,b)=> (b.discount||0) - (a.discount||0)); break;
      case "ending":
        out.sort((a,b)=> new Date(a.validTo) - new Date(b.validTo)); break;
      default:
        out.sort((a,b)=>{
          // simple score: higher discount, sooner expiry, lower price
          const score = d => (d.discount||0)*2 - d.price/50 - daysLeft(d.validTo)/5;
          return score(b) - score(a);
        });
    }
    return out;
  }, [query, region, source, maxPrice, sortBy, deals]);

  function resetFilters(){
    setQuery(""); setRegion("All regions"); setSource("All sources"); setMaxPrice(200); setSortBy("best");
  }

  function addDeal(e){
    e.preventDefault();
    const fd = new FormData(e.currentTarget);
    const nd = {
      id: `${fd.get("source")}-${Math.random().toString(36).slice(2,7)}`,
      title: fd.get("title"),
      course: fd.get("course"),
      region: fd.get("region"),
      price: Number(fd.get("price")),
      was: Number(fd.get("was")) || undefined,
      discount: Number(fd.get("discount")) || undefined,
      validTo: fd.get("validTo"),
      url: fd.get("url"),
      source: fd.get("source"),
      tags: fd.get("tags") ? fd.get("tags").split(",").map(s=>s.trim()).filter(Boolean) : [],
    };
    setDeals(prev=>[nd, ...prev]);
    setShowAdd(false);
    e.currentTarget.reset();
  }

  return (
    <div className="min-h-screen bg-gradient-to-b from-emerald-50 to-white text-slate-800">
      {/* Header */}
      <header className="sticky top-0 z-20 backdrop-blur bg-white/70 border-b border-emerald-100">
        <div className="max-w-6xl mx-auto px-4 py-4 flex items-center gap-3">
          <div className="w-9 h-9 rounded-2xl bg-emerald-500 flex items-center justify-center shadow">
            <span className="text-white font-bold">NZ</span>
          </div>
          <div className="flex-1">
            <h1 className="text-xl sm:text-2xl font-semibold">Golf Deals NZ</h1>
            <p className="text-sm text-slate-500 -mt-0.5">Find green fee bargains from GrabOne, Bookme, and NZ Golf Deals</p>
          </div>
          <button className="hidden sm:inline-flex items-center gap-2 px-3 py-2 rounded-xl bg-emerald-600 text-white hover:bg-emerald-700 shadow"
            onClick={()=>setShowAdd(v=>!v)}>
            <Plus size={16}/> Add deal
          </button>
        </div>
      </header>

      {/* Controls */}
      <section className="max-w-6xl mx-auto px-4 pt-6">
        <div className="grid md:grid-cols-12 gap-3">
          <div className="md:col-span-5">
            <div className="flex items-center gap-2 px-3 py-2 rounded-2xl border border-slate-200 bg-white shadow-sm">
              <Search size={18} className="shrink-0"/>
              <input value={query} onChange={e=>setQuery(e.target.value)} placeholder="Search course, city, tag…" className="w-full bg-transparent outline-none text-sm py-1"/>
              {query && (
                <button onClick={()=>setQuery("")}><X size={16} className="text-slate-400"/></button>
              )}
            </div>
          </div>
          <div className="md:col-span-2">
            <Select value={region} onChange={setRegion} label="Region" options={REGIONS} />
          </div>
          <div className="md:col-span-2">
            <Select value={source} onChange={setSource} label="Source" options={SOURCES} />
          </div>
          <div className="md:col-span-3">
            <div className="rounded-2xl border border-slate-200 bg-white p-3 shadow-sm">
              <label className="text-xs text-slate-500 flex items-center gap-2 mb-1"><DollarSign size={14}/> Max price: <span className="font-semibold text-slate-700">{currency(maxPrice)}</span></label>
              <input type="range" min={10} max={300} step={5} value={maxPrice} onChange={e=>setMaxPrice(Number(e.target.value))} className="w-full"/>
            </div>
          </div>
        </div>

        <div className="mt-3 grid sm:grid-cols-3 gap-3">
          <div className="rounded-2xl border border-slate-200 bg-white p-3 shadow-sm">
            <label className="text-xs text-slate-500 flex items-center gap-2"><Filter size={14}/> Sort by</label>
            <div className="mt-1 flex flex-wrap gap-2">
              {[
                {id:"best", label:"Best match"},
                {id:"price", label:"Lowest price"},
                {id:"discount", label:"Biggest saving"},
                {id:"ending", label:"Ending soon"},
              ].map(o=> (
                <button key={o.id} onClick={()=>setSortBy(o.id)} className={classNames("px-3 py-1.5 rounded-xl text-sm border", sortBy===o.id?"bg-emerald-600 text-white border-emerald-600":"bg-white hover:bg-emerald-50 border-slate-200")}>{o.label}</button>
              ))}
            </div>
          </div>
          <div className="rounded-2xl border border-slate-200 bg-white p-3 shadow-sm">
            <label className="text-xs text-slate-500 flex items-center gap-2"><Timer size={14}/> Active filters</label>
            <div className="mt-1 flex flex-wrap gap-2 text-sm">
              {region!=="All regions" && <Chip onClear={()=>setRegion("All regions")} icon={<MapPin size={14}/>} label={region} />}
              {source!=="All sources" && <Chip onClear={()=>setSource("All sources")} icon={<Tag size={14}/>} label={source} />}
              {maxPrice<300 && <Chip onClear={()=>setMaxPrice(300)} icon={<DollarSign size={14}/>} label={`≤ ${currency(maxPrice)}`} />}
              {query && <Chip onClear={()=>setQuery("")} icon={<Search size={14}/>} label={`“${query}”`} />}
              {(!query && region==="All regions" && source==="All sources" && maxPrice===300) && <span className="text-slate-400">None</span>}
            </div>
          </div>
          <div className="rounded-2xl border border-slate-200 bg-white p-3 shadow-sm flex items-center justify-between">
            <div>
              <p className="text-xs text-slate-500">Results</p>
              <p className="text-lg font-semibold">{filtered.length} deal{filtered.length===1?"":"s"}</p>
            </div>
            <button onClick={resetFilters} className="inline-flex items-center gap-2 px-3 py-2 rounded-xl bg-white border border-slate-200 hover:bg-slate-50"><RefreshCw size={16}/> Reset</button>
          </div>
        </div>
      </section>

      {/* Results */}
      <section className="max-w-6xl mx-auto px-4 py-6">
        <div className="grid sm:grid-cols-2 lg:grid-cols-3 gap-4">
          <AnimatePresence>
            {filtered.map((d, i)=> (
              <motion.article key={d.id}
                initial={{opacity:0, y:10}} animate={{opacity:1, y:0}} exit={{opacity:0, y:-10}} transition={{duration:0.15, delay: i*0.02}}
                className="rounded-2xl border border-slate-200 bg-white shadow-sm overflow-hidden flex flex-col">
                <div className="p-4 flex-1 flex flex-col gap-3">
                  <div className="flex items-start justify-between gap-3">
                    <div>
                      <h3 className="font-semibold leading-snug">{d.title}</h3>
                      <p className="text-sm text-slate-600 flex items-center gap-1 mt-0.5"><MapPin size={14}/>{d.course} • {d.region}</p>
                    </div>
                    <span className="text-xs px-2 py-1 rounded-full bg-emerald-50 text-emerald-700 border border-emerald-200">{d.source}</span>
                  </div>

                  <div className="flex items-end gap-3">
                    <div className="text-2xl font-bold">{currency(d.price)}</div>
                    {d.was && <div className="text-sm text-slate-500">was <span className="line-through">{currency(d.was)}</span></div>}
                    {typeof d.discount === 'number' && <div className="ml-auto text-sm px-2 py-1 rounded-lg bg-emerald-100 text-emerald-700">-{d.discount}%</div>}
                  </div>

                  <div className="flex flex-wrap gap-2 mt-1">
                    {d.tags?.map((t, idx)=> (
                      <span key={idx} className="text-xs px-2 py-1 rounded-lg bg-slate-100 text-slate-700 border border-slate-200">{t}</span>
                    ))}
                  </div>
                </div>
                <div className="px-4 pb-4 flex items-center justify-between">
                  <div className="text-xs text-slate-600 flex items-center gap-1"><Calendar size={14}/> Ends in {Math.max(daysLeft(d.validTo),0)} day{daysLeft(d.validTo)===1?"":"s"}</div>
                  <a href={d.url} target="_blank" rel="noreferrer" className="inline-flex items-center gap-2 px-3 py-2 rounded-xl bg-emerald-600 text-white hover:bg-emerald-700"><ExternalLink size={16}/> Book</a>
                </div>
              </motion.article>
            ))}
          </AnimatePresence>
        </div>

        {filtered.length===0 && (
          <div className="text-center py-16 text-slate-500">
            Nothing found. Try widening filters or resetting.
          </div>
        )}
      </section>

      {/* Add deal drawer */}
      <AnimatePresence>
        {showAdd && (
          <motion.div initial={{opacity:0}} animate={{opacity:1}} exit={{opacity:0}} className="fixed inset-0 z-30 bg-black/30 backdrop-blur-sm flex">
            <motion.div initial={{x:400}} animate={{x:0}} exit={{x:400}} transition={{type:"spring", stiffness:200, damping:20}}
              className="ml-auto w-full max-w-md h-full bg-white shadow-2xl p-5 overflow-y-auto">
              <div className="flex items-center justify-between">
                <h2 className="text-lg font-semibold">Add a deal</h2>
                <button onClick={()=>setShowAdd(false)} className="p-2 rounded-full hover:bg-slate-100"><X size={18}/></button>
              </div>
              <p className="text-sm text-slate-500 mt-1">Quickly add a deal you found. Great for testing or manual curation.</p>
              <form className="mt-4 space-y-3" onSubmit={addDeal}>
                <Field label="Title"><input name="title" required className="input" placeholder="18 Holes + Cart"/></Field>
                <Field label="Course"><input name="course" required className="input" placeholder="Titirangi Golf Club"/></Field>
                <Field label="Region">
                  <select name="region" className="input" defaultValue="Auckland">{REGIONS.filter(r=>r!=="All regions").map(r=> <option key={r}>{r}</option>)}</select>
                </Field>
                <div className="grid grid-cols-2 gap-3">
                  <Field label="Price (NZD)"><input name="price" type="number" min={0} step={1} required className="input"/></Field>
                  <Field label="Was (optional)"><input name="was" type="number" min={0} step={1} className="input"/></Field>
                </div>
                <div className="grid grid-cols-2 gap-3">
                  <Field label="Discount % (optional)"><input name="discount" type="number" min={0} max={90} step={1} className="input"/></Field>
                  <Field label="Valid to"><input name="validTo" type="date" required className="input"/></Field>
                </div>
                <Field label="Source">
                  <select name="source" className="input" defaultValue="GrabOne">{SOURCES.filter(s=>s!=="All sources").map(s=> <option key={s}>{s}</option>)}</select>
                </Field>
                <Field label="Link"><input name="url" type="url" required className="input" placeholder="https://…"/></Field>
                <Field label="Tags (comma-separated)"><input name="tags" className="input" placeholder="Cart included, Midweek"/></Field>
                <div className="pt-2 flex items-center gap-2">
                  <button className="px-3 py-2 rounded-xl bg-emerald-600 text-white hover:bg-emerald-700">Save deal</button>
                  <button type="button" className="px-3 py-2 rounded-xl border border-slate-200 hover:bg-slate-50" onClick={()=>setShowAdd(false)}>Cancel</button>
                </div>
              </form>

              <div className="mt-6 p-3 rounded-xl border border-slate-200 bg-slate-50">
                <h3 className="font-medium">How to hook this up to live data</h3>
                <ol className="list-disc list-inside text-sm text-slate-600 space-y-1 mt-1">
                  <li>Create a tiny server (Cloudflare Worker, Vercel, or Supabase Edge Function).</li>
                  <li>Fetch/parse deals from GrabOne, Bookme, and NZ Golf Deals (respect robots.txt & terms).</li>
                  <li>Normalize fields to {{ title, course, region, price, was, discount, validTo, url, source, tags }}.</li>
                  <li>Expose as JSON at <code>/api/deals</code> and <em>CORS-enable</em> for this domain.</li>
                  <li>Add a <code>useEffect</code> here to fetch and <code>setDeals(json)</code>.</li>
                </ol>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Footer */}
      <footer className="border-t border-emerald-100 bg-white/60">
        <div className="max-w-6xl mx-auto px-4 py-6 text-sm text-slate-600 flex flex-col sm:flex-row items-center justify-between gap-3">
          <p>© {new Date().getFullYear()} Golf Deals NZ — built for Aotearoa golfers</p>
          <div className="flex items-center gap-3">
            <button onClick={()=>setShowAdd(true)} className="px-3 py-2 rounded-xl border border-slate-200 hover:bg-slate-50"><Plus size={16}/> Add a deal</button>
            <a href="#" className="underline hover:no-underline">Privacy</a>
          </div>
        </div>
      </footer>

      {/* Styles */}
      <style>{`
        .input { @apply w-full px-3 py-2 rounded-xl border border-slate-200 bg-white outline-none focus:ring-2 focus:ring-emerald-200; }
      `}</style>
    </div>
  );
}

function Field({label, children}){
  return (
    <label className="block text-sm">
      <span className="text-slate-600">{label}</span>
      <div className="mt-1">{children}</div>
    </label>
  );
}

function Chip({label, icon, onClear}){
  return (
    <span className="inline-flex items-center gap-1 px-2.5 py-1.5 rounded-xl border border-slate-200 bg-white text-slate-700">
      <span className="opacity-70">{icon}</span>
      <span className="text-sm">{label}</span>
      <button onClick={onClear} className="ml-1 rounded-md p-0.5 hover:bg-slate-100"><X size={14}/></button>
    </span>
  );
}

function Select({label, value, onChange, options}){
  return (
    <div className="rounded-2xl border border-slate-200 bg-white p-3 shadow-sm">
      <label className="text-xs text-slate-500">{label}</label>
      <select value={value} onChange={e=>onChange(e.target.value)} className="w-full mt-1 px-3 py-2 rounded-xl border border-slate-200 bg-white">
        {options.map(opt => <option key={opt} value={opt}>{opt}</option>)}
      </select>
    </div>
  );
}
